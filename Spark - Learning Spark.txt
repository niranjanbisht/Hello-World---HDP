Word Count
----------

val textFile = sc.textFile("NYSE_stocks_blanks.tsv")
val counts = textFile.flatMap(line => line.split("\t")).map(word => (word, 1)).reduceByKey(_ + _)

// Load our input data.
val input = sc.textFile("NYSE_stocks.tsv")
// Split it up into words.
val words = input.flatMap(line => line.split(" "))
// Transform into pairs and count.
val counts = words.map(word => (word, 1)).reduceByKey{case (x, y) => x + y}
// Save the word count back out to a

counts.take(10).foreach(println)



val lines = sc.textFile("NYSE_stocks.tsv")

lines.count()
lines.first()

val filterLines = lines.filter(line => line.contains("AIT"))



println("Input had " + filterLines.count() + " AIT lines")
println("Here are 10 examples:")
filterLines.take(10).foreach(println)

-------------------

val input = sc.parallelize(List(1, 2, 3, 4))
val result = input.map(x => x * x)
println(result.collect().mkString(","))
------------

Example 3-30. flatMap() in Scala, splitting lines into multiple words
val lines = sc.parallelize(List("hello world", "hi"))
val words = lines.flatMap(line => line.split(" "))
words.first() // returns "hello"

-----------------
val rdd = List(1,2,3,4)
val sum = rdd.reduce((x, y) => x + y)


Example 3-36. aggregate() in Scala

val result = rdd.aggregate((0, 0))(
(acc, value) => (acc._1 + value, acc._2 + 1),
(acc1, acc2) => (acc1._1 + acc2._1, acc1._2 + acc2._2))

val avg = result._1 / result._2.toDouble



val result = rdd.map(x => x*x)
println(result.count())
println(result.collect().mkString(","))


------------------------


Example 6-3. Accumulator empty line count in Scala


val file = sc.textFile("NYSE_stocks_blanks.tsv")
val blankLines = sc.accumulator(0) // Create an Accumulator[Int] initialized to 0
val callSigns = file.flatMap(line => {
if (line == "") {
blankLines += 1 // Add to the accumulator
}
line.split(" ")
})
callSigns.saveAsTextFile("output.txt")
println("Blank lines: " + blankLines.value)


-----------------



import java.io._
class Car (milesPerGallon: Int, gallonsPerTank: Int) {
var mpg: Int = milesPerGallon
var gpt: Int = gallonsPerTank
var mpt: Int = 0
def milesPerTank(){
mpt = mpg * gpt
println("Number of Miles Per Tank: " + mpt)
}} 

